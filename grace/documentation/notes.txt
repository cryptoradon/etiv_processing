Version 1.4.0. Coz this guy said and latest https://github.com/lab-smile/GRACE/issues/11:

Traceback (most recent call last):
  File "/mnt/GRACE/test.py", line 165, in <module>
    model.load_state_dict(torch.load(os.path.join(args.data_dir, args.model_load_name)))
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 2477, in load_state_dict
    raise RuntimeError(
RuntimeError: Error(s) in loading state_dict for DataParallel:
        Missing key(s) in state_dict: "module.vit.blocks.0.norm_cross_attn.weight", "module.vit.blocks.0.norm_cross_attn.bias", "module.vit.blocks.0.cross_attn.out_proj.weight", "module.vit.blocks.0.cross_attn.out_proj.bias", "module.vit.blocks.0.cross_attn.to_q.weight", "module.vit.blocks.0.cross_attn.to_k.weight", "module.vit.blocks.0.cross_attn.to_v.weight", "module.vit.blocks.1.norm_cross_attn.weight", "module.vit.blocks.1.norm_cross_attn.bias", "module.vit.blocks.1.cross_attn.out_proj.weight", "module.vit.blocks.1.cross_attn.out_proj.bias", "module.vit.blocks.1.cross_attn.to_q.weight", "module.vit.blocks.1.cross_attn.to_k.weight", "module.vit.blocks.1.cross_attn.to_v.weight", "module.vit.blocks.2.norm_cross_attn.weight", "module.vit.blocks.2.norm_cross_attn.bias", "module.vit.blocks.2.cross_attn.out_proj.weight", "module.vit.blocks.2.cross_attn.out_proj.bias", "module.vit.blocks.2.cross_attn.to_q.weight", "module.vit.blocks.2.cross_attn.to_k.weight", "module.vit.blocks.2.cross_attn.to_v.weight", "module.vit.blocks.3.norm_cross_attn.weight", "module.vit.blocks.3.norm_cross_attn.bias", "module.vit.blocks.3.cross_attn.out_proj.weight", "module.vit.blocks.3.cross_attn.out_proj.bias", "module.vit.blocks.3.cross_attn.to_q.weight", "module.vit.blocks.3.cross_attn.to_k.weight", "module.vit.blocks.3.cross_attn.to_v.weight", "module.vit.blocks.4.norm_cross_attn.weight", "module.vit.blocks.4.norm_cross_attn.bias", "module.vit.blocks.4.cross_attn.out_proj.weight", "module.vit.blocks.4.cross_attn.out_proj.bias", "module.vit.blocks.4.cross_attn.to_q.weight", "module.vit.blocks.4.cross_attn.to_k.weight", "module.vit.blocks.4.cross_attn.to_v.weight", "module.vit.blocks.5.norm_cross_attn.weight", "module.vit.blocks.5.norm_cross_attn.bias", "module.vit.blocks.5.cross_attn.out_proj.weight", "module.vit.blocks.5.cross_attn.out_proj.bias", "module.vit.blocks.5.cross_attn.to_q.weight", "module.vit.blocks.5.cross_attn.to_k.weight", "module.vit.blocks.5.cross_attn.to_v.weight", "module.vit.blocks.6.norm_cross_attn.weight", "module.vit.blocks.6.norm_cross_attn.bias", "module.vit.blocks.6.cross_attn.out_proj.weight", "module.vit.blocks.6.cross_attn.out_proj.bias", "module.vit.blocks.6.cross_attn.to_q.weight", "module.vit.blocks.6.cross_attn.to_k.weight", "module.vit.blocks.6.cross_attn.to_v.weight", "module.vit.blocks.7.norm_cross_attn.weight", "module.vit.blocks.7.norm_cross_attn.bias", "module.vit.blocks.7.cross_attn.out_proj.weight", "module.vit.blocks.7.cross_attn.out_proj.bias", "module.vit.blocks.7.cross_attn.to_q.weight", "module.vit.blocks.7.cross_attn.to_k.weight", "module.vit.blocks.7.cross_attn.to_v.weight", "module.vit.blocks.8.norm_cross_attn.weight", "module.vit.blocks.8.norm_cross_attn.bias", "module.vit.blocks.8.cross_attn.out_proj.weight", "module.vit.blocks.8.cross_attn.out_proj.bias", "module.vit.blocks.8.cross_attn.to_q.weight", "module.vit.blocks.8.cross_attn.to_k.weight", "module.vit.blocks.8.cross_attn.to_v.weight", "module.vit.blocks.9.norm_cross_attn.weight", "module.vit.blocks.9.norm_cross_attn.bias", "module.vit.blocks.9.cross_attn.out_proj.weight", "module.vit.blocks.9.cross_attn.out_proj.bias", "module.vit.blocks.9.cross_attn.to_q.weight", "module.vit.blocks.9.cross_attn.to_k.weight", "module.vit.blocks.9.cross_attn.to_v.weight", "module.vit.blocks.10.norm_cross_attn.weight", "module.vit.blocks.10.norm_cross_attn.bias", "module.vit.blocks.10.cross_attn.out_proj.weight", "module.vit.blocks.10.cross_attn.out_proj.bias", "module.vit.blocks.10.cross_attn.to_q.weight", "module.vit.blocks.10.cross_attn.to_k.weight", "module.vit.blocks.10.cross_attn.to_v.weight", "module.vit.blocks.11.norm_cross_attn.weight", "module.vit.blocks.11.norm_cross_attn.bias", "module.vit.blocks.11.cross_attn.out_proj.weight", "module.vit.blocks.11.cross_out.attn_proj.bias", "module.vit.blocks.11.cross_attn.to_q.weight", "module.vit.blocks.11.cross_attn.to_k.weight", "module.vit.blocks.11.cross_attn.to_v.weight". 
        
        
Also this guy has same issues: https://github.com/lab-smile/GRACE/issues/9

Also there is a pdb debug statement where the version mismatch happens in the code in Kersten's code. Even running Kersten and Negin's code directly gives the same error.

Found which file is the code running in and found all the edit history connected to releases. Currently testing https://github.com/Project-MONAI/MONAI/commit/62425d7d8809d129b4f35a51f425d02d325bd816

tested version 0.6.0. didn't work either ran into a lot of errrors in the code (syntax errors) like line 39. Also ran into cuda version error.

Tried copying the pretrained model used form previous runs by kersten and negin, didnt work.

Finally the test.py file that ignores the model changes and runs on the cpu didnt work. Major disadvantage: IT HAS TO RUN ON THE CPU! Also it rturns gibberish but also it doenst have to run on the CPU.

Also talk about the vacation days.

Basically currently probably have two problems:

1. Newer versions have different key names. So look at them and choose.
2. Older verisons have CUDA uncompatibility. 

Focused on 2.

Had to rebuilt the container myself, downloaded new dependencies etc. Tried differnet monai versions here. Finally 0.9.0 worked. Had to update the container coz of that, other dpeendencies dont work. Now numpy version is problematic old monai doesnt work with numpy 2.x.x. Decided to upgrade monai.

/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/utils/deprecate_utils.py:221: FutureWarning: monai.networks.nets.unetr UNETR.__init__:pos_embed: Argument `pos_embed` has been deprecated since version 1.2. It will be removed in version 1.4. please use `proj_type` instead.
  warn_deprecated(argname, msg, warning_category)

Traceback (most recent call last):
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/transforms/transform.py", line 141, in apply_transform
    return _apply_transform(transform, data, unpack_items, lazy, overrides, log_stats)
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/transforms/transform.py", line 98, in _apply_transform
    return transform(data, lazy=lazy) if isinstance(transform, LazyTrait) else transform(data)
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/transforms/spatial/dictionary.py", line 510, in __call__
    d[key] = self.spacing_transform(
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/transforms/spatial/array.py", line 518, in __call__
    new_affine = zoom_affine(affine_, out_d, diagonal=self.diagonal)
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/data/utils.py", line 849, in zoom_affine
    zs = np.linalg.cholesky(rzs.T @ rzs).T
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/numpy/linalg/_linalg.py", line 839, in cholesky
    r = gufunc(a, signature=signature)
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/numpy/linalg/_linalg.py", line 107, in _raise_linalgerror_nonposdef
    raise LinAlgError("Matrix is not positive definite")
numpy.linalg.LinAlgError: Matrix is not positive definite

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/transforms/transform.py", line 141, in apply_transform
    return _apply_transform(transform, data, unpack_items, lazy, overrides, log_stats)
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/transforms/transform.py", line 98, in _apply_transform
    return transform(data, lazy=lazy) if isinstance(transform, LazyTrait) else transform(data)
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/transforms/compose.py", line 335, in __call__
    result = execute_compose(
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/transforms/compose.py", line 111, in execute_compose
    data = apply_transform(
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/transforms/transform.py", line 171, in apply_transform
    raise RuntimeError(f"applying transform {transform}") from e
RuntimeError: applying transform <monai.transforms.spatial.dictionary.Spacingd object at 0x7c4b55a47970>

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/mnt/GRACE/test.py", line 201, in <module>
    img_name = os.path.split(test_ds[i]["image_meta_dict"]["filename_or_obj"])[1]
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/data/dataset.py", line 112, in __getitem__
    return self._transform(index)
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/data/dataset.py", line 98, in _transform
    return apply_transform(self.transform, data_i) if self.transform is not None else data_i
  File "/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/transforms/transform.py", line 171, in apply_transform
    raise RuntimeError(f"applying transform {transform}") from e
RuntimeError: applying transform <monai.transforms.compose.Compose object at 0x7c4b55a476a0>


at monai 1.3.0. So had to downgrade monai. 1.2.0 gave invalid image.

At least the warnings disappear at 0.9.1 and 0.9.0. But still the image is invalid.

Used test images used before at 1.3.0. Code went further than even but got:
/home/ahmadkhana/.local/lib/python3.10/site-packages/monai/transforms/spatial/array.py:635: UserWarning: axcodes ('RAS') length is smaller than number of input spatial dimensions D=2.
Orientation: spatial shape = (218, 182), channels = 260,please make sure the input is in the channel-first format.
  warnings.warn(
Traceback (most recent call last):
  File "/mnt/GRACE/test.py", line 208, in <module>
    img_name = os.path.split(test_ds[i]["image_meta_dict"]["filename_or_obj"])[1]
KeyError: 'image_meta_dict'

Kersten suspects that there is a normalization that needs to be done that is skipped by the code somewhere. -- Next day, apparently i had forgotten to run the conversion code and was comparing an old version, now it all runs.

Comparison:
Doesn't owrk with bert for some reason. Checking mri info. Differences:
voxel size is 1 for bert, smaller for others.
fov is significantly larger for bert
x interval is smaller
orientation is not *AS it is *IA
primary slice direction is coronal not axial

-- False alarm. Still doesnt work for all.

Observation: Segmented image and the image i think is the original image are not aligned. There may be a normalization step as kersten said. 

Fixed the problem by observing the mri info, apparently the converison to mat eliminated the spatial metadata. No affine matrix.

It doesnt work with conformed images, decided to go with the normal ones.
